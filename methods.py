import re
import subprocess
import logging

logger = logging.getLogger('methods')

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
def service_cmd(action,name):
    cmd = cmd = f'systemctl {action} {name}' 
    try:
        result = subprocess.check_output(cmd,text=True,shell=True)
    except subprocess.CalledProcessError as e:
        result = e.output
    return result

# –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
def get_status_low(name:str) -> str:
    result = service_cmd('status',name)
    name = re.findall('\*(?:\s\S+)+',result)[0]
    isactive = re.findall('Active:\s\S*\s\S*',result)[0]
    if 'active (running)' in isactive:
        active_text = 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç'
    elif 'inactive (dead)' in isactive:
         active_text = '‚ò†Ô∏è –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'
    elif 'failed' in isactive:
         active_text = 'üî¥ –û—à–∏–±–∫–∞'
    else:
        active_text = f'–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ({isactive})'
    
    memory = re.findall('Memory:\s\S*',result)
    if memory:
        memory = memory[0].split(' ')[1]
        memory_txt = f'üíæ –ü–∞–º—è—Ç—å: {memory}'
    else:
        memory_txt = ''
    text = f'{name}\n\n{active_text}\n{memory_txt}'
    return text

